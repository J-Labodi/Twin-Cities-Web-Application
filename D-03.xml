<?xml version="1.0" encoding="UTF-8"?>
<group-xml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:noNamespaceSchemaLocation="group_schema.xsd">
    <!-- This file is an example of a valid group xml file. 
    Use this example file as a template and fill with your own data  
    validating as you go along using Oxygen or some other schema aware editor -->

    <!-- The following is the assignment metadata (DO NOT CHANGE) -->
    <module id="UFCFV4-30-2" acronymn="DSA">
        <title>Data Schemas &amp; Applications</title>
        <year>2021-22</year>
        <hand_in>2022-03-03</hand_in>
        <spec_url>https://fetstudy.uwe.ac.uk/~p-chatterjee/2021-22/modules/dsa/assignment/</spec_url>
    </module>
    <!-- end of metadata section -->

    <!-- Group Section -->
    <group id="D-03">
        <member id="15003138" name="Callum Jones"/>
        <member id="20020322" name="Connor MacKintosh"/>
        <member id="20045364" name="Dikshyanta Uprety"/>
        <member id="18026465" name="Jeno Labodi"/>
        <workshop>
            <daytime>Friday 15:00</daytime>
            <tutor>JH</tutor>
            <tutor>PC</tutor>
        </workshop>
        <!-- Each student should have contributed to one or more components -->
        <component type="Database Design">
            <contributor id="18026465"/>
            <contributor id="15003138"/>
            <contributor id="14011846"/>
            <contributor id="20020322"/>
            <description> Our database design consists of two elements, a conceptual ER model and a logical ER model.
                Our conceptual entity-relationship model has four entities of city, image, category and point of
                interest. These entities contain a range of attributes which have been designed to hold a
                collection of data about our twin cities and their places of interest. The conceptual model
                also specifies the relationship and cardinality between the entities using crows foot notation.
                Our logical entity-relationship model develops the conceptual model by identifying primary keys
                to uniquely identify entity instances and foreign keys to complete associations between entities.
                In our logical model we also set attribute types and length ranges and resolved the many-to-many
                relationship between category and places of interest using a join table. The team worked
                collaboratively using Lucidchart to develop our entity-relationship models and used team
                meetings to agree on the design of our database. </description>
            <problems> During the initial stages of designing our conceptual model, the team considered using a
                range of entities which didnt entirely consider the context of our data for our chosen twin cities. </problems>
            <solutions> The team reconsidered the distinction between what constitutes an entity and an attribute,
                and realised our initial consideration of entities would have made the modification of our database
                complex. We therefore proceeded with entities in our conceptual model to correct this. </solutions>
            <hours_effort>12</hours_effort>
        </component>
        <component type="Database Implementation">
            <contributor id="20020322"/>
            <contributor id="18026465"/>
            <contributor id="15003138"/>
            <contributor id="14011846"/>
            <description> The database we chose for our project was MYSQL the database would be hosted on our server using phpMyAdmin.
            MYSQL was chosen because of its capabilities to use PHP and JavaScript requests and to be able to push data to the 
            database using PHP. After the database design, it was simple to implement, we just had to make sure all the data fields,
            table names and column IDs matched up. After this, each team member was tasked with finding data for each point of interest. 
            Once all the data was gathered it was imported into phpMyAdmin. Another database was created at a later date to hold the Flickr 
            cached results. </description>
            <problems>Getting to know how to use phpMyAdmin took a little bit of time. For example, changing the structure 
            and alerting table data is different to MYSQL workbench. Another problem occurred when trying to push the Flickr cached data.</problems>
            <solutions> The solution to working out phpMyAdmin was soon resolved with some research on YouTube. The Flickr cache was resolved 
            by looking at some online blogs for advice. </solutions>
            <hours_effort>12</hours_effort>
        </component>
        <component type="HTML Design &amp; Markup">
            <contributor id="18026465"/>
            <contributor id="14026542"/>
            <contributor id="20020322"/>
            <description> Sed eu nunc ipsum, nec suscipit lectus. Quisque quis nibh at sem dictum
                pretium. Pellentesque augue mauris, lobortis vel elementum quis, consequat tempor
                felis. .... </description>
            <problems> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec lobortis
                lacinia porttitor. Pellentesque augue mauris, lobortis vel elementum quis, consequat
                tempor felis.... </problems>
            <solutions> Integer dictum diam id ligula aliquet sed dapibus nibh elementum.
                Pellentesque augue mauris, lobortis vel elementum quis, consequat tempor felis. .... </solutions>
            <hours_effort>6</hours_effort>
        </component>
        <component type="PHP Coding">
            <contributor id="18026465"/>
            <contributor id="20020322"/>
            <description> Building our data driven web application required to create the main structure in PHP that consists of 
                various functionalities such as generating display of the current and forecast weather as well as representing 
                an RSS feed related to the current dataset held in the database. Our PHP code also includes an additional flickr.php file
                that contains the PHP code related to the individual task of displaying additional images of the Twin Cities via an external API.
                The application makes use of an additional configuration file coded in PHP that contains various application-wide data such as 
                relevant information to complete API requests. During development, the initially completed Twin Cities weather project given
                the starting point of the gradually extended, final web application. Obtaining the desired weather information from OpenWeatherMap
                required to generate the appropriate API call and access the requested XML data that may be displayed within the tables that have been
                generated in PHP via embedded HTML. The accessed data is stored in arrays and a fraction of the information is defined as a constant,
                depending on the nature of the data. Data from XML requires formatting before it is presented within the generated tables. 
                Various PHP built in functions used to complete this task. Eventually, the completed weather application has been extended with 
                the Twin Cities Map section that employs JavaScript. The team members have equally divided the group tasks of the project followed by
                merging the Twin Cities Map and RSS feed components with the initially completed Weather section. GitHub employed to store
                the project files along with using a designated WhatsApp group to discuss occurring obstacles during development or post updates
                on the progression in the assigned tasks. </description>
            <problems> The team members have not experienced any major obstacles during the development of the PHP code,
                although implementing some features appeared to be more challenging than others. A great example for this is representing the
                forecast data in the Twin Cities Weather section. The XML data related to the weather forecast contains live weather updates of
                every 3 hours, although our design required to display the weather forecast of the upcoming 5 days, representing data related 
                only to midday and midnight. </problems>
            <solutions> Our PHP code includes a foreach loop that iterates through the forecast data presented in XML format, 
                filters the midday and midnight forecast values via a selection that contains code to push the desired forecast data into the relevant array.
                The content of these arrays may be accessed to represent the correct weather forecast of the upcoming 5 days, displaying only
                the midday and midnight temperatures. </solutions>
            <hours_effort>120</hours_effort>
        </component>
        <component type="Javascript / JSON Coding">
            <contributor id="20020322"/>
            <description> JavaScript has been used in the development of our group project. Its main use in our project was to display 
            a map for both our chosen twin cities. By taking advantage of Google maps API and its libraries our team was able to 
            display maps of both Birmingham and Chicago. These maps were also able to display markers for various points of interest, 
            the markers then have the capabilities to display information from the database when a mouse hovers over it. 
            Another function was the ability to redirect a user to separate HTML page that displays a picture and information 
            about the particular place. Another use of JavaScript and Google maps libraries was to disable some of the user interface
            functions to help avoid errors and increase user experience. These functions would not have been possible without the use 
            of JavaScript Listener functions. AJAX has also been used in the project to pull in data from a JSON file that was pulled 
            from the database on the server to finally be displayed on the webpage. JSON has been used throughout the project.
            Having this tool allowed our team to easily pull data from the database, push data to the database and manage, 
            access data with ease. JSON has been used both within JavaScript files and PHP with the use of these languages built-in functions.
            </description>
            <problems> Most team members had very little JavaScript knowledge at the beginning of the project. A lot of research was
            done into JavaScripts capabilities its syntax and how it could be implemented into our project. More problems arose when 
            incorporating APIs an example of this would have been when trying to displays two maps at the same time from one API call. 
            Some other problems occurred when JSON data that had been pulled from the database was to be displayed on the webpage. 
            The only problem with JSON was a bit of research was needed to understand how specific data can be accessed within the JSON object.  </problems>
            <solutions> The solutions to our project were soon resolved when the team sat down and worked them out together. 
            The solution we had displaying two maps at once was to get around the clashing API call by putting a call to both 
            map calls into a single function then calling it once. We solved the issue regarding displaying our JSON data on the 
            webpage by researching AJAX. We used internet tutorials and blogs in our research. After some W3C schools research was 
            done we were soon able to gain the necessary knowledge about JSON for our project. </solutions>
            <hours_effort>60</hours_effort>
        </component>
        <component type="CSS Design">
            <contributor id="18026465"/>
            <description> Initially, the project included an external CSS stylesheet that contained all the selectors and declarations to customise
                the look of our web application. The layout has been divided into divisions within a “Wrapper” element that allows us to declare and position
                the different blocks as inline-block. This layout design represented the twin cities alongside each other, providing appropriate arrangements
                of the represented elements. This stylesheet also included various style declarations, targeting headings with different sizes, tables and
                its elements and the representation of Twin Cities Maps. Designing the layout of the web application and styling its elements has been completed
                by one group member that volunteered to improve the look of the web application.Eventually, this initially created CSS stylesheet has been discarded
                as the design of the web application has been improved further by completing the individual task of refactoring the web application by applying 
                responsive design through Bootstrap. </description>
            <problems> The web application has not been responsive to different screen sizes and the targeted elements required a considerable amount of padding
                to provide an acceptable overall look. Appropriately aligning the elements of the individual divisions without the employment of any specific CSS framework
                appeared to be a truly challenging task. </problems>
            <solutions> The front-end has been refactored to be responsive within one of the selected individual tasks. Utilising Bootstrap framework
                allowed us to easily obtain changes in design by targeting specific divisions of the web application through the predefined
                classes of Bootstrap. </solutions>
            <hours_effort>80</hours_effort>
        </component>
    </group>


    <!-- This section lists the techohnolgies used and mentions any number of source files.-->
    <application>
        <!-- a list of up to 8 technologies used (see schema) -->
        <technologies>
            <tech>php</tech>
            <tech>html5</tech>
            <tech>xml</tech>
            <tech>javascript</tech>
            <tech>json</tech>
            <tech>css</tech>
            <tech>rss</tech>
            <tech>sql</tech>
        </technologies>
        <source_files>
            <!-- up to 12 files -->
            <file>
                <name>index.php</name>
                <purpose>main application file</purpose>
            </file>
            <file>
                <name>config.php</name>
                <purpose>configuration file</purpose>
            </file>
            <file>
                <name>dsa_utility.php</name>
                <purpose>holds required functions</purpose>
            </file>
            <file>
                <name>googlemaps.js</name>
                <purpose>holds all the logic required to display the google maps to the index.php file</purpose>
            </file>
        </source_files>
    </application>

    <!-- something about any learning outcomes achieved and any other overall comments -->
    <overall_comments> 
        The group members have gained a solid base of knowledge in the process of designing databases and implementing it within a web based application.
        We have successfully gained an understanding of Conceptual and Logical ER models including the identification and representation of entities, attributes and relationships.
        The team members have also gained  a great amount of experience in database implementation and working with external APIs. 
        As for the programming languages that we utilised for this project, the majority of team members did not have any prior experience in PHP
        and developing the backbone of our web application in this language helped us to gain a comprehensive understanding of its syntax and the potential of
        utilising PHP in web development.
    </overall_comments>
</group-xml>
<!-- DSA Assignment Group D-03 XML File, 2022 -->
<!-- author's: 
        connor2.mackintosh@live.uwe.ac.uk
        jeno2.labodi@live.uwe.ac.uk
        callum9.jones@live.uwe.ac.uk
        dikshyanta2.Uprety@live.uwe.ac.uk>
-->
